int cols, rows; // Number of columns and rows in the grid
float[][] gridX, gridY, gridZ; // 2D arrays to store grid positions
float scl = 75; // Scale for grid spacing
float time = 0; // Time variable for animation
float warpStrength = 0.2; // Strength of warp effect
float angle = 1; // Angle of slant
color lineColor = color(255); // Color of the lines
color bgColor = color(0);

void setup() {
  size(800, 600, P3D);
  cols = width / int(scl);
  rows = height / int(scl);
  gridX = new float[cols][rows];
  gridY = new float[cols][rows];
  gridZ = new float[cols][rows];
}

void draw() {
  background(bgColor);
  updateGrid(); // Update grid positions
  renderGrid(); // Render the grid
  time += 0.01; // Increment time for animation
}

void updateGrid() {
  float xoff = 0; // Initialize noise offset for x
  for (int i = 0; i < cols; i++) {
    float yoff = 0; // Initialize noise offset for y
    for (int j = 0; j < rows; j++) {
      // Calculate grid positions using Perlin noise
      float warpX = map(noise(xoff, yoff, time), 0, 1, -warpStrength * scl, warpStrength * scl);
      float warpY = map(noise(xoff + 1000, yoff + 1000, time), 0, 1, -warpStrength * scl, warpStrength * scl);
      gridX[i][j] = i * scl + warpX;
      gridY[i][j] = j * scl + warpY;
      // Slant the grid to make right side more inclined upwards than the left side
      float slant = map(i, 0, cols - 1, -angle * rows, angle * rows);
      gridZ[i][j] = slant;
      yoff += 0.1; // Increment noise offset for y
    }
    xoff += 0.1; // Increment noise offset for x
  }
}

void renderGrid() {
  stroke(lineColor); // Set the color of the lines
  noFill();
  translate(width / 4, height / 1.5); // Translate to desired position
  rotateX(PI / 4); // Rotate around X axis
  rotateZ(-PI / 2); // Rotate around Z axis
  for (int i = 0; i < cols - 1; i++) {
    for (int j = 0; j < rows - 1; j++) {
      float x1 = gridX[i][j];
      float y1 = gridY[i][j];
      float z1 = gridZ[i][j];
      float x2 = gridX[i + 1][j];
      float y2 = gridY[i + 1][j];
      float z2 = gridZ[i + 1][j];
      float x3 = gridX[i + 1][j + 1];
      float y3 = gridY[i + 1][j + 1];
      float z3 = gridZ[i + 1][j + 1];
      float x4 = gridX[i][j + 1];
      float y4 = gridY[i][j + 1];
      float z4 = gridZ[i][j + 1];
      beginShape();
      vertex(x1, y1, z1);
      vertex(x2, y2, z2);
      vertex(x3, y3, z3);
      vertex(x4, y4, z4);
      endShape(CLOSE);
    }
  }
}